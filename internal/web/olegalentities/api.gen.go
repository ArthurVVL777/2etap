// Package olegalentities provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package olegalentities

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// LegalEntityDTO defines model for LegalEntityDTO.
type LegalEntityDTO struct {
	// CreatedAt Время создания юридического лица.
	CreatedAt time.Time `json:"created_at"`

	// Id Уникальный идентификатор юридического лица.
	Id openapi_types.UUID `json:"id"`

	// Name Название юридического лица.
	Name string `json:"name"`

	// UpdatedAt Время последнего обновления юридического лица.
	UpdatedAt time.Time `json:"updated_at"`
}

// EntityUUID defines model for entityUUID.
type EntityUUID = openapi_types.UUID

// Uuid defines model for uuid.
type Uuid = openapi_types.UUID

// CreateLegalEntityJSONRequestBody defines body for CreateLegalEntity for application/json ContentType.
type CreateLegalEntityJSONRequestBody = LegalEntityDTO

// UpdateLegalEntityJSONRequestBody defines body for UpdateLegalEntity for application/json ContentType.
type UpdateLegalEntityJSONRequestBody = LegalEntityDTO

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all legal entities
	// (GET /legal-entities)
	GetAllLegalEntities(ctx echo.Context) error
	// Create a legal entity
	// (POST /legal-entities)
	CreateLegalEntity(ctx echo.Context) error
	// Delete a legal entity
	// (DELETE /legal-entities/{id})
	DeleteLegalEntity(ctx echo.Context, id openapi_types.UUID) error
	// Update a legal entity
	// (PUT /legal-entities/{id})
	UpdateLegalEntity(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAllLegalEntities converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllLegalEntities(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllLegalEntities(ctx)
	return err
}

// CreateLegalEntity converts echo context to params.
func (w *ServerInterfaceWrapper) CreateLegalEntity(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateLegalEntity(ctx)
	return err
}

// DeleteLegalEntity converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLegalEntity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLegalEntity(ctx, id)
	return err
}

// UpdateLegalEntity converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateLegalEntity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateLegalEntity(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/legal-entities", wrapper.GetAllLegalEntities)
	router.POST(baseURL+"/legal-entities", wrapper.CreateLegalEntity)
	router.DELETE(baseURL+"/legal-entities/:id", wrapper.DeleteLegalEntity)
	router.PUT(baseURL+"/legal-entities/:id", wrapper.UpdateLegalEntity)

}

type GetAllLegalEntitiesRequestObject struct {
}

type GetAllLegalEntitiesResponseObject interface {
	VisitGetAllLegalEntitiesResponse(w http.ResponseWriter) error
}

type GetAllLegalEntities200JSONResponse []LegalEntityDTO

func (response GetAllLegalEntities200JSONResponse) VisitGetAllLegalEntitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateLegalEntityRequestObject struct {
	Body *CreateLegalEntityJSONRequestBody
}

type CreateLegalEntityResponseObject interface {
	VisitCreateLegalEntityResponse(w http.ResponseWriter) error
}

type CreateLegalEntity201JSONResponse LegalEntityDTO

func (response CreateLegalEntity201JSONResponse) VisitCreateLegalEntityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLegalEntityRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteLegalEntityResponseObject interface {
	VisitDeleteLegalEntityResponse(w http.ResponseWriter) error
}

type DeleteLegalEntity204Response struct {
}

func (response DeleteLegalEntity204Response) VisitDeleteLegalEntityResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateLegalEntityRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateLegalEntityJSONRequestBody
}

type UpdateLegalEntityResponseObject interface {
	VisitUpdateLegalEntityResponse(w http.ResponseWriter) error
}

type UpdateLegalEntity200JSONResponse LegalEntityDTO

func (response UpdateLegalEntity200JSONResponse) VisitUpdateLegalEntityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all legal entities
	// (GET /legal-entities)
	GetAllLegalEntities(ctx context.Context, request GetAllLegalEntitiesRequestObject) (GetAllLegalEntitiesResponseObject, error)
	// Create a legal entity
	// (POST /legal-entities)
	CreateLegalEntity(ctx context.Context, request CreateLegalEntityRequestObject) (CreateLegalEntityResponseObject, error)
	// Delete a legal entity
	// (DELETE /legal-entities/{id})
	DeleteLegalEntity(ctx context.Context, request DeleteLegalEntityRequestObject) (DeleteLegalEntityResponseObject, error)
	// Update a legal entity
	// (PUT /legal-entities/{id})
	UpdateLegalEntity(ctx context.Context, request UpdateLegalEntityRequestObject) (UpdateLegalEntityResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAllLegalEntities operation middleware
func (sh *strictHandler) GetAllLegalEntities(ctx echo.Context) error {
	var request GetAllLegalEntitiesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllLegalEntities(ctx.Request().Context(), request.(GetAllLegalEntitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllLegalEntities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAllLegalEntitiesResponseObject); ok {
		return validResponse.VisitGetAllLegalEntitiesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateLegalEntity operation middleware
func (sh *strictHandler) CreateLegalEntity(ctx echo.Context) error {
	var request CreateLegalEntityRequestObject

	var body CreateLegalEntityJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateLegalEntity(ctx.Request().Context(), request.(CreateLegalEntityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateLegalEntity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateLegalEntityResponseObject); ok {
		return validResponse.VisitCreateLegalEntityResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteLegalEntity operation middleware
func (sh *strictHandler) DeleteLegalEntity(ctx echo.Context, id openapi_types.UUID) error {
	var request DeleteLegalEntityRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteLegalEntity(ctx.Request().Context(), request.(DeleteLegalEntityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteLegalEntity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteLegalEntityResponseObject); ok {
		return validResponse.VisitDeleteLegalEntityResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateLegalEntity operation middleware
func (sh *strictHandler) UpdateLegalEntity(ctx echo.Context, id openapi_types.UUID) error {
	var request UpdateLegalEntityRequestObject

	request.Id = id

	var body UpdateLegalEntityJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateLegalEntity(ctx.Request().Context(), request.(UpdateLegalEntityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateLegalEntity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateLegalEntityResponseObject); ok {
		return validResponse.VisitUpdateLegalEntityResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}