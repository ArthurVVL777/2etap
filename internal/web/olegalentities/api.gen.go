// Package olegalentities provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package olegalentities

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// BankAccountCreateRequest defines model for BankAccountCreateRequest.
type BankAccountCreateRequest struct {
	LegalEntityId openapi_types.UUID `json:"legal_entity_id"`
}

// BankAccountDTO defines model for BankAccountDTO.
type BankAccountDTO struct {
	AccountNumber string             `json:"account_number"`
	Address       string             `json:"address"`
	BankName      string             `json:"bank_name"`
	Bik           string             `json:"bik"`
	Comment       string             `json:"comment"`
	CorrAccount   string             `json:"corr_account"`
	Currency      string             `json:"currency"`
	Id            openapi_types.UUID `json:"id"`
	LegalEntityId openapi_types.UUID `json:"legal_entity_id"`
}

// BankAccountUpdateRequest defines model for BankAccountUpdateRequest.
type BankAccountUpdateRequest struct {
	AccountNumber *string            `json:"account_number,omitempty"`
	Address       *string            `json:"address,omitempty"`
	BankName      *string            `json:"bank_name,omitempty"`
	Bik           *string            `json:"bik,omitempty"`
	Comment       *string            `json:"comment,omitempty"`
	CorrAccount   string             `json:"corr_account"`
	Currency      *string            `json:"currency,omitempty"`
	Id            openapi_types.UUID `json:"id"`
	LegalEntityId openapi_types.UUID `json:"legal_entity_id"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// LegalEntityCreateRequest defines model for LegalEntityCreateRequest.
type LegalEntityCreateRequest struct {
	Name string `json:"name"`
}

// LegalEntityDTO defines model for LegalEntityDTO.
type LegalEntityDTO struct {
	CreatedAt time.Time          `json:"created_at"`
	DeletedAt *time.Time         `json:"deleted_at"`
	Name      string             `json:"name"`
	UpdatedAt *time.Time         `json:"updated_at,omitempty"`
	Uuid      openapi_types.UUID `json:"uuid"`
}

// LegalEntityUpdateRequest defines model for LegalEntityUpdateRequest.
type LegalEntityUpdateRequest struct {
	Name string `json:"name"`
}

// PostLegalEntitiesResponse defines model for PostLegalEntitiesResponse.
type PostLegalEntitiesResponse struct {
	Uuid openapi_types.UUID `json:"uuid"`
}

// EntityUUID defines model for entityUUID.
type EntityUUID = openapi_types.UUID

// Uuid defines model for uuid.
type Uuid = openapi_types.UUID

// GetAllBankAccountsParams defines parameters for GetAllBankAccounts.
type GetAllBankAccountsParams struct {
	LegalEntityId openapi_types.UUID `form:"legalEntityId" json:"legalEntityId"`
}

// PostBankAccountJSONRequestBody defines body for PostBankAccount for application/json ContentType.
type PostBankAccountJSONRequestBody = BankAccountCreateRequest

// PutBankAccountJSONRequestBody defines body for PutBankAccount for application/json ContentType.
type PutBankAccountJSONRequestBody = BankAccountUpdateRequest

// PostLegalEntitiesJSONRequestBody defines body for PostLegalEntities for application/json ContentType.
type PostLegalEntitiesJSONRequestBody = LegalEntityCreateRequest

// PutLegalEntitiesUUIDJSONRequestBody defines body for PutLegalEntitiesUUID for application/json ContentType.
type PutLegalEntitiesUUIDJSONRequestBody = LegalEntityUpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /bank-accounts)
	GetAllBankAccounts(ctx echo.Context, params GetAllBankAccountsParams) error

	// (POST /bank-accounts)
	PostBankAccount(ctx echo.Context) error

	// (DELETE /bank-accounts/{uuid})
	DeleteBankAccount(ctx echo.Context, uuid openapi_types.UUID) error

	// (PUT /bank-accounts/{uuid})
	PutBankAccount(ctx echo.Context, uuid openapi_types.UUID) error
	// Получить все юридические лица
	// (GET /legal-entities)
	GetLegalEntities(ctx echo.Context) error
	// Создать юридическое лицо
	// (POST /legal-entities)
	PostLegalEntities(ctx echo.Context) error
	// Удалить юридическое лицо
	// (DELETE /legal-entities/{uuid})
	DeleteLegalEntitiesUUID(ctx echo.Context, uuid openapi_types.UUID) error
	// Обновить юридическое лицо
	// (PUT /legal-entities/{uuid})
	PutLegalEntitiesUUID(ctx echo.Context, uuid openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAllBankAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllBankAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllBankAccountsParams
	// ------------- Required query parameter "legalEntityId" -------------

	err = runtime.BindQueryParameter("form", true, true, "legalEntityId", ctx.QueryParams(), &params.LegalEntityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllBankAccounts(ctx, params)
	return err
}

// PostBankAccount converts echo context to params.
func (w *ServerInterfaceWrapper) PostBankAccount(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostBankAccount(ctx)
	return err
}

// DeleteBankAccount converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBankAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteBankAccount(ctx, uuid)
	return err
}

// PutBankAccount converts echo context to params.
func (w *ServerInterfaceWrapper) PutBankAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutBankAccount(ctx, uuid)
	return err
}

// GetLegalEntities converts echo context to params.
func (w *ServerInterfaceWrapper) GetLegalEntities(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLegalEntities(ctx)
	return err
}

// PostLegalEntities converts echo context to params.
func (w *ServerInterfaceWrapper) PostLegalEntities(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLegalEntities(ctx)
	return err
}

// DeleteLegalEntitiesUUID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLegalEntitiesUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLegalEntitiesUUID(ctx, uuid)
	return err
}

// PutLegalEntitiesUUID converts echo context to params.
func (w *ServerInterfaceWrapper) PutLegalEntitiesUUID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutLegalEntitiesUUID(ctx, uuid)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/bank-accounts", wrapper.GetAllBankAccounts)
	router.POST(baseURL+"/bank-accounts", wrapper.PostBankAccount)
	router.DELETE(baseURL+"/bank-accounts/:uuid", wrapper.DeleteBankAccount)
	router.PUT(baseURL+"/bank-accounts/:uuid", wrapper.PutBankAccount)
	router.GET(baseURL+"/legal-entities", wrapper.GetLegalEntities)
	router.POST(baseURL+"/legal-entities", wrapper.PostLegalEntities)
	router.DELETE(baseURL+"/legal-entities/:uuid", wrapper.DeleteLegalEntitiesUUID)
	router.PUT(baseURL+"/legal-entities/:uuid", wrapper.PutLegalEntitiesUUID)

}

type GetAllBankAccountsRequestObject struct {
	Params GetAllBankAccountsParams
}

type GetAllBankAccountsResponseObject interface {
	VisitGetAllBankAccountsResponse(w http.ResponseWriter) error
}

type GetAllBankAccounts200JSONResponse []BankAccountDTO

func (response GetAllBankAccounts200JSONResponse) VisitGetAllBankAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostBankAccountRequestObject struct {
	Body *PostBankAccountJSONRequestBody
}

type PostBankAccountResponseObject interface {
	VisitPostBankAccountResponse(w http.ResponseWriter) error
}

type PostBankAccount201JSONResponse BankAccountDTO

func (response PostBankAccount201JSONResponse) VisitPostBankAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteBankAccountRequestObject struct {
	Uuid openapi_types.UUID `json:"uuid"`
}

type DeleteBankAccountResponseObject interface {
	VisitDeleteBankAccountResponse(w http.ResponseWriter) error
}

type DeleteBankAccount204Response struct {
}

func (response DeleteBankAccount204Response) VisitDeleteBankAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PutBankAccountRequestObject struct {
	Uuid openapi_types.UUID `json:"uuid"`
	Body *PutBankAccountJSONRequestBody
}

type PutBankAccountResponseObject interface {
	VisitPutBankAccountResponse(w http.ResponseWriter) error
}

type PutBankAccount204Response struct {
}

func (response PutBankAccount204Response) VisitPutBankAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetLegalEntitiesRequestObject struct {
}

type GetLegalEntitiesResponseObject interface {
	VisitGetLegalEntitiesResponse(w http.ResponseWriter) error
}

type GetLegalEntities200JSONResponse []LegalEntityDTO

func (response GetLegalEntities200JSONResponse) VisitGetLegalEntitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLegalEntities401JSONResponse ErrorResponse

func (response GetLegalEntities401JSONResponse) VisitGetLegalEntitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostLegalEntitiesRequestObject struct {
	Body *PostLegalEntitiesJSONRequestBody
}

type PostLegalEntitiesResponseObject interface {
	VisitPostLegalEntitiesResponse(w http.ResponseWriter) error
}

type PostLegalEntities201JSONResponse PostLegalEntitiesResponse

func (response PostLegalEntities201JSONResponse) VisitPostLegalEntitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostLegalEntities401JSONResponse ErrorResponse

func (response PostLegalEntities401JSONResponse) VisitPostLegalEntitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLegalEntitiesUUIDRequestObject struct {
	Uuid openapi_types.UUID `json:"uuid"`
}

type DeleteLegalEntitiesUUIDResponseObject interface {
	VisitDeleteLegalEntitiesUUIDResponse(w http.ResponseWriter) error
}

type DeleteLegalEntitiesUUID204Response struct {
}

func (response DeleteLegalEntitiesUUID204Response) VisitDeleteLegalEntitiesUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteLegalEntitiesUUID401JSONResponse ErrorResponse

func (response DeleteLegalEntitiesUUID401JSONResponse) VisitDeleteLegalEntitiesUUIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutLegalEntitiesUUIDRequestObject struct {
	Uuid openapi_types.UUID `json:"uuid"`
	Body *PutLegalEntitiesUUIDJSONRequestBody
}

type PutLegalEntitiesUUIDResponseObject interface {
	VisitPutLegalEntitiesUUIDResponse(w http.ResponseWriter) error
}

type PutLegalEntitiesUUID204Response struct {
}

func (response PutLegalEntitiesUUID204Response) VisitPutLegalEntitiesUUIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PutLegalEntitiesUUID401JSONResponse ErrorResponse

func (response PutLegalEntitiesUUID401JSONResponse) VisitPutLegalEntitiesUUIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /bank-accounts)
	GetAllBankAccounts(ctx context.Context, request GetAllBankAccountsRequestObject) (GetAllBankAccountsResponseObject, error)

	// (POST /bank-accounts)
	PostBankAccount(ctx context.Context, request PostBankAccountRequestObject) (PostBankAccountResponseObject, error)

	// (DELETE /bank-accounts/{uuid})
	DeleteBankAccount(ctx context.Context, request DeleteBankAccountRequestObject) (DeleteBankAccountResponseObject, error)

	// (PUT /bank-accounts/{uuid})
	PutBankAccount(ctx context.Context, request PutBankAccountRequestObject) (PutBankAccountResponseObject, error)
	// Получить все юридические лица
	// (GET /legal-entities)
	GetLegalEntities(ctx context.Context, request GetLegalEntitiesRequestObject) (GetLegalEntitiesResponseObject, error)
	// Создать юридическое лицо
	// (POST /legal-entities)
	PostLegalEntities(ctx context.Context, request PostLegalEntitiesRequestObject) (PostLegalEntitiesResponseObject, error)
	// Удалить юридическое лицо
	// (DELETE /legal-entities/{uuid})
	DeleteLegalEntitiesUUID(ctx context.Context, request DeleteLegalEntitiesUUIDRequestObject) (DeleteLegalEntitiesUUIDResponseObject, error)
	// Обновить юридическое лицо
	// (PUT /legal-entities/{uuid})
	PutLegalEntitiesUUID(ctx context.Context, request PutLegalEntitiesUUIDRequestObject) (PutLegalEntitiesUUIDResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAllBankAccounts operation middleware
func (sh *strictHandler) GetAllBankAccounts(ctx echo.Context, params GetAllBankAccountsParams) error {
	var request GetAllBankAccountsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllBankAccounts(ctx.Request().Context(), request.(GetAllBankAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllBankAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAllBankAccountsResponseObject); ok {
		return validResponse.VisitGetAllBankAccountsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostBankAccount operation middleware
func (sh *strictHandler) PostBankAccount(ctx echo.Context) error {
	var request PostBankAccountRequestObject

	var body PostBankAccountJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostBankAccount(ctx.Request().Context(), request.(PostBankAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostBankAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostBankAccountResponseObject); ok {
		return validResponse.VisitPostBankAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteBankAccount operation middleware
func (sh *strictHandler) DeleteBankAccount(ctx echo.Context, uuid openapi_types.UUID) error {
	var request DeleteBankAccountRequestObject

	request.Uuid = uuid

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteBankAccount(ctx.Request().Context(), request.(DeleteBankAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteBankAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteBankAccountResponseObject); ok {
		return validResponse.VisitDeleteBankAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutBankAccount operation middleware
func (sh *strictHandler) PutBankAccount(ctx echo.Context, uuid openapi_types.UUID) error {
	var request PutBankAccountRequestObject

	request.Uuid = uuid

	var body PutBankAccountJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutBankAccount(ctx.Request().Context(), request.(PutBankAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutBankAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutBankAccountResponseObject); ok {
		return validResponse.VisitPutBankAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetLegalEntities operation middleware
func (sh *strictHandler) GetLegalEntities(ctx echo.Context) error {
	var request GetLegalEntitiesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetLegalEntities(ctx.Request().Context(), request.(GetLegalEntitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLegalEntities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetLegalEntitiesResponseObject); ok {
		return validResponse.VisitGetLegalEntitiesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostLegalEntities operation middleware
func (sh *strictHandler) PostLegalEntities(ctx echo.Context) error {
	var request PostLegalEntitiesRequestObject

	var body PostLegalEntitiesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostLegalEntities(ctx.Request().Context(), request.(PostLegalEntitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLegalEntities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostLegalEntitiesResponseObject); ok {
		return validResponse.VisitPostLegalEntitiesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteLegalEntitiesUUID operation middleware
func (sh *strictHandler) DeleteLegalEntitiesUUID(ctx echo.Context, uuid openapi_types.UUID) error {
	var request DeleteLegalEntitiesUUIDRequestObject

	request.Uuid = uuid

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteLegalEntitiesUUID(ctx.Request().Context(), request.(DeleteLegalEntitiesUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteLegalEntitiesUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteLegalEntitiesUUIDResponseObject); ok {
		return validResponse.VisitDeleteLegalEntitiesUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutLegalEntitiesUUID operation middleware
func (sh *strictHandler) PutLegalEntitiesUUID(ctx echo.Context, uuid openapi_types.UUID) error {
	var request PutLegalEntitiesUUIDRequestObject

	request.Uuid = uuid

	var body PutLegalEntitiesUUIDJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutLegalEntitiesUUID(ctx.Request().Context(), request.(PutLegalEntitiesUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutLegalEntitiesUUID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutLegalEntitiesUUIDResponseObject); ok {
		return validResponse.VisitPutLegalEntitiesUUIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
